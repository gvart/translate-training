buildscript {
    ext {
        kotlinVersion = '1.2.30'
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'

group = 'md.gva'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}


repositories {
    mavenCentral()
}

dependencies {
    compile(project(":client"))
    compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
    compile ('org.jsoup:jsoup:1.11.2')
    compile ('io.github.microutils:kotlin-logging:1.4.9')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    //testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
    testCompile('io.projectreactor:reactor-test')
}

jar {
    baseName = 'translate-training-core'
    version = '0.0.1-SNAPSHOT'
}

bootJar {
    dependsOn ':client:buildAngular'

    into('BOOT-INF/classes/static') {
        from "${project(':client').projectDir}/dist"
    }

    launchScript()
}

//task copyPublicResources(type: Copy){
//    from '../client/dist'
//    into 'src/main/resources/static'
//}
//
//copyPublicResources.dependsOn(':client:build')
//processResources.dependsOn(copyPublicResources)